services:
  db:
    container_name: db
    build: 
      context: ./db
      dockerfile: Dockerfile
    # ports:
    #   - "5432:5432" 
    environment: # PICK FROM .ENV FILE
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    networks:
      - pn-net
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U $(POSTGRES_USER) -d $(POSTGRES_DB)"] 
      interval: 5s 
      timeout: 5s 
      retries: 5 
      start_period: 0s 
    volumes:
      - db_data:/var/lib/pgsql/data
 
    

  web:
    container_name: web
    build: 
      context: ./web 
      dockerfile: Dockerfile  
    # ports:
    #   - "5000:5000"             # not anymore exposiing Flask app on port 5000]
    environment: # PICK FROM .ENV FILE
      - POSTGRES_HOST
      - POSTGRES_PORT      
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB    
    networks:     
      - pn-net      
      - lb-net

    depends_on:
      db:
        condition: service_healthy
    command: ["./wait-for-it.sh", "db:5432", "--", "python3", "app.py"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"] # Check if the Flask app is healthy
      interval: 20s # Interval between health checks
      timeout: 5s # Timeout for the health check
      retries: 3  # Health check for the Flask app
      start_period: 5s # Wait for the app to start

  haproxy:
    build: ./loadbalancer # Build the HAProxy image from the ./haproxy directory
    container_name: haproxy_lb_pn
    ports:
      - "80:80"       # Expose HAProxy's port 80 to the host's port 80
    depends_on:
       web:           # HAProxy depends on the Flask app service
        condition: service_healthy # Ensure HAProxy starts only when the web service is healthycon
    networks:
      - lb-net
networks:
  pn-net:
    driver: bridge
    internal: true # Only for internal communication between db and web
  lb-net:
    driver: bridge
volumes:
  db_data:

  