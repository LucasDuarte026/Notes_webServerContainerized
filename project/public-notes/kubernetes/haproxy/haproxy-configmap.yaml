

# haproxy-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
data:
  #  haproxy-config adjusted to work with a web application in Kubernetes
  #  this solves for the "web" application that is running in the cluster
  haproxy.cfg: |
    global
        log /dev/log    local0
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

    defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000ms
        timeout client 50000ms
        timeout server 50000ms

    listen stats
        bind *:8080
        mode http
        stats enable
        stats uri /haproxy_stats
        stats realm HAProxy\ Statistics
        stats auth admin:password # Change this for production!

    frontend http_front
        bind *:80
        default_backend http_back

    backend http_back
        balance roundrobin
        # Use the Kubernetes Service name for your web application
        # Kubernetes will handle load balancing to the web-deployment Pods
        server web-app web:5000 check